{"version":3,"sources":["webpack:///./src/templates/tags.tsx"],"names":["Tags","props","tag","pageContext","_props$data$allMarkdo","data","allMarkdownRemark","edges","totalCount","tagData","allTagYaml","find","n","node","id","toLowerCase","shareUrl","config","siteUrl","location","pathname","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_layouts__WEBPACK_IMPORTED_MODULE_6__","react_helmet__WEBPACK_IMPORTED_MODULE_8___default","title","name","content","description","property","facebook","twitterHandle","_components_Wrapper__WEBPACK_IMPORTED_MODULE_5__","className","SiteHeader","outer","image","style","backgroundImage","childImageSharp","fluid","src","inner","_components_header_SiteNav__WEBPACK_IMPORTED_MODULE_3__","isHome","_styles_shared__WEBPACK_IMPORTED_MODULE_7__","Fragment","SiteMain","PostFeed","PostFeedRaise","map","_ref","_components_PostCard__WEBPACK_IMPORTED_MODULE_4__","key","fields","slug","post","_components_Footer__WEBPACK_IMPORTED_MODULE_2__","pageQuery"],"mappings":"qPAyHeA,UApE2B,SAAAC,GACxC,IAAMC,EAAMD,EAAME,YAAYD,IADmBE,EAEnBH,EAAMI,KAAKC,kBAAjCC,EAFyCH,EAEzCG,MAAOC,EAFkCJ,EAElCI,WACTC,EAAUR,EAAMI,KAAKK,WAAWH,MAAMI,KAC1C,SAAAC,GAAC,OAAIA,EAAEC,KAAKC,GAAGC,gBAAkBb,EAAIa,gBAEjCC,EAAWC,IAAOC,QAAUjB,EAAMkB,SAASC,SAEjD,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACE,EAAAH,EAAD,KACED,EAAAC,EAAAC,cAAA,aACGrB,EADH,MACWe,IAAOS,OAElBL,EAAAC,EAAAC,cAAA,QAAMI,KAAK,cAAcC,QAAY1B,EAAL,MAAce,IAAOY,cACrDR,EAAAC,EAAAC,cAAA,QAAMO,SAAS,eAAeF,QAASX,IAAOS,QAC9CL,EAAAC,EAAAC,cAAA,QAAMO,SAAS,UAAUF,QAAQ,YACjCP,EAAAC,EAAAC,cAAA,QAAMO,SAAS,WAAWF,QAAY1B,EAAL,MAAce,IAAOS,QACtDL,EAAAC,EAAAC,cAAA,QAAMO,SAAS,SAASF,QAASZ,IACjCK,EAAAC,EAAAC,cAAA,QAAMO,SAAS,oBAAoBF,QAASX,IAAOc,WACnDV,EAAAC,EAAAC,cAAA,QAAMI,KAAK,eAAeC,QAAQ,wBAClCP,EAAAC,EAAAC,cAAA,QAAMI,KAAK,gBAAgBC,QAAY1B,EAAL,MAAce,IAAOS,QACvDL,EAAAC,EAAAC,cAAA,QAAMI,KAAK,cAAcC,QAASZ,IAClCK,EAAAC,EAAAC,cAAA,QAAMI,KAAK,eAAeC,QAASX,IAAOe,iBAE5CX,EAAAC,EAAAC,cAACU,EAAA,EAAD,KACEZ,EAAAC,EAAAC,cAAA,UACEW,UAAcC,IAAL,IAAmBC,IAAnB,KAA4B3B,GAAWA,EAAQI,KAAKwB,MAAQ,GAAK,YAC1EC,MAAO,CACLC,gBACE9B,GAAWA,EAAQI,KAAKwB,MAAxB,QACY5B,EAAQI,KAAKwB,MAAMG,gBAAgBC,MAAMC,IADrD,KAEI,KAGRrB,EAAAC,EAAAC,cAAA,OAAKW,UAAS,GAAKS,KACjBtB,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAASC,QAAQ,IACjBxB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,KACEzB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,KAAY5C,GACZmB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,KACGrC,GAAWA,EAAQI,KAAKgB,YACvBpB,EAAQI,KAAKgB,YAEbR,EAAAC,EAAAC,cAAAF,EAAAC,EAAAyB,SAAA,wBACmBvC,EAAa,GAAQA,EAArB,SACD,IAAfA,GAAA,SACe,IAAfA,GAAA,gBAOba,EAAAC,EAAAC,cAAA,QAAMT,GAAG,YAAYoB,UAAcc,IAAL,IAAiBZ,KAC7Cf,EAAAC,EAAAC,cAAA,OAAKW,UAAS,GAAKS,KACjBtB,EAAAC,EAAAC,cAAA,OAAKW,UAAce,IAAL,IAAiBC,KAC5B3C,EAAM4C,IAAI,SAAAC,GAAA,IAAGvC,EAAHuC,EAAGvC,KAAH,OACTQ,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CAAUC,IAAKzC,EAAK0C,OAAOC,KAAMC,KAAM5C,SAK/CQ,EAAAC,EAAAC,cAACmC,EAAA,EAAD,SAQD,IAAMC,EAAS","file":"component---src-templates-tags-tsx-97abb7c0bde0ea8743f7.js","sourcesContent":["import { graphql } from 'gatsby';\nimport React from 'react';\n\nimport Footer from '../components/Footer';\nimport SiteNav from '../components/header/SiteNav';\nimport PostCard from '../components/PostCard';\nimport Wrapper from '../components/Wrapper';\nimport IndexLayout from '../layouts';\nimport {\n  inner,\n  outer,\n  PostFeed,\n  PostFeedRaise,\n  SiteDescription,\n  SiteHeader,\n  SiteHeaderContent,\n  SiteMain,\n  SiteTitle,\n} from '../styles/shared';\nimport { PageContext } from './post';\nimport Helmet from 'react-helmet';\nimport config from '../website-config';\n\ninterface TagTemplateProps {\n  pageContext: {\n    tag: string;\n  };\n  location: {\n    pathname: string;\n  };\n  data: {\n    allTagYaml: {\n      edges: {\n        node: {\n          id: string;\n          description: string;\n          image?: {\n            childImageSharp: {\n              fluid: any;\n            };\n          };\n        };\n      }[];\n    };\n    allMarkdownRemark: {\n      totalCount: number;\n      edges: {\n        node: PageContext;\n      }[];\n    };\n  };\n}\n\nconst Tags: React.SFC<TagTemplateProps> = props => {\n  const tag = props.pageContext.tag;\n  const { edges, totalCount } = props.data.allMarkdownRemark;\n  const tagData = props.data.allTagYaml.edges.find(\n    n => n.node.id.toLowerCase() === tag.toLowerCase(),\n  );\n  const shareUrl = config.siteUrl + props.location.pathname;\n\n  return (\n    <IndexLayout>\n      <Helmet>\n        <title>\n          {tag} - {config.title}\n        </title>\n        <meta name=\"description\" content={`${tag} - ${config.description}`} />\n        <meta property=\"og:site_name\" content={config.title} />\n        <meta property=\"og:type\" content=\"website\" />\n        <meta property=\"og:title\" content={`${tag} - ${config.title}`} />\n        <meta property=\"og:url\" content={shareUrl} />\n        <meta property=\"article:publisher\" content={config.facebook} />\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n        <meta name=\"twitter:title\" content={`${tag} - ${config.title}`} />\n        <meta name=\"twitter:url\" content={shareUrl} />\n        <meta name=\"twitter:site\" content={config.twitterHandle} />\n      </Helmet>\n      <Wrapper>\n        <header\n          className={`${SiteHeader} ${outer} ${tagData && tagData.node.image ? '' : 'no-cover'}`}\n          style={{\n            backgroundImage:\n              tagData && tagData.node.image\n                ? `url('${tagData.node.image.childImageSharp.fluid.src}')`\n                : '',\n          }}\n        >\n          <div className={`${inner}`}>\n            <SiteNav isHome={false} />\n            <SiteHeaderContent>\n              <SiteTitle>{tag}</SiteTitle>\n              <SiteDescription>\n                {tagData && tagData.node.description ? (\n                  tagData.node.description\n                ) : (\n                  <>\n                    A collection of {totalCount > 1 && `${totalCount} posts`}\n                    {totalCount === 1 && `1 post`}\n                    {totalCount === 0 && `No posts`}\n                  </>\n                )}\n              </SiteDescription>\n            </SiteHeaderContent>\n          </div>\n        </header>\n        <main id=\"site-main\" className={`${SiteMain} ${outer}`}>\n          <div className={`${inner}`}>\n            <div className={`${PostFeed} ${PostFeedRaise}`}>\n              {edges.map(({ node }) => (\n                <PostCard key={node.fields.slug} post={node} />\n              ))}\n            </div>\n          </div>\n        </main>\n        <Footer />\n      </Wrapper>\n    </IndexLayout>\n  );\n};\n\nexport default Tags;\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    allTagYaml {\n      edges {\n        node {\n          id\n          description\n          image {\n            childImageSharp {\n              fluid(maxWidth: 3720) {\n                ...GatsbyImageSharpFluid\n              }\n            }\n          }\n        }\n      }\n    }\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          excerpt\n          timeToRead\n          frontmatter {\n            title\n            tags\n            date\n            image {\n              childImageSharp {\n                fluid(maxWidth: 1240) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n            author {\n              id\n              bio\n              avatar {\n                children {\n                  ... on ImageSharp {\n                    fixed(quality: 100) {\n                      src\n                    }\n                  }\n                }\n              }\n            }\n          }\n          fields {\n            layout\n            slug\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}